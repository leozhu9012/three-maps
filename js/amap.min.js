"use strict";var baseMap=null,mapTypes={NORMAL:new AMap.createDefaultLayer,EARTH:[new AMap.TileLayer.Satellite,new AMap.TileLayer.RoadNet],SATELLITE:[new AMap.TileLayer.Satellite,new AMap.TileLayer.RoadNet]},getMapContainer=function(e){return baseMap=new AMap.Map(e,Object.assign({resizeEnable:!0,zoom:14,center:[110.4451370863,31.7258705204]},1<arguments.length&&void 0!==arguments[1]?arguments[1]:{})),initFun(baseMap),window.__ksh_map__=baseMap},initFun=function(n){n.setMapTypes=function(e){n.add(mapTypes[e]||mapTypes.NORMAL)}},setMapPlugin=function(t){return new Promise(function(e,n){AMap.plugin(t,function(){e("ok")})})},getMapTileLayer=function(){return new AMap.TileLayer(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getMapTileLayerTraffic=function(){return new AMap.TileLayer.Traffic(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getMapTileLayerSatellite=function(){return new AMap.TileLayer.Satellite(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getMapTileLayerRoadNet=function(){return new AMap.TileLayer.RoadNet(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getMapBuildings=function(){return new AMap.Buildings(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getMapDistrictLayer=function(){return new AMap.DistrictLayer(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getMapIndoorMap=function(){return new AMap.IndoorMap(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getMapTileLayerWMS=function(){return new AMap.TileLayer.WMS(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getMapTileLayerWMTS=function(){return new AMap.TileLayer.WMTS(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getMapMapboxVectorTileLayer=function(){return new AMap.MapboxVectorTileLayer(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getMapVectorLayer=function(){return new AMap.VectorLayer(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getMapHeatMap=function(e){return new AMap.HeatMap(e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:{})},getMapLabelsLayer=function(){return new AMap.LabelsLayer(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getMapCustomLayer=function(e){return new AMap.CustomLayer(e,1<arguments.length&&void 0!==arguments[1]?arguments[1]:{})},getMapTileLayerFlexible=function(){return new AMap.TileLayer.Flexible(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getMapImageLayer=function(){return new AMap.ImageLayer(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getMapCanvasLayer=function(){return new AMap.CanvasLayer(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getMapGLCustomLayer=function(){return new AMap.GLCustomLayer(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getMapMarker=function(){return new AMap.Marker(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getMapText=function(){return new AMap.Text(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getMapIcon=function(){return new AMap.Icon(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getSize=function(e,n){return new AMap.Size(e,n)},getPixel=function(e,n){return new AMap.Pixel(e,n)},getMapLabelMarker=function(){return new AMap.LabelMarker(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getMapElasticMarker=function(){return new AMap.ElasticMarker(0<arguments.length&&void 0!==arguments[0]?arguments[0]:{})},getMapMarkerCluster=function(e,n,t){return new AMap.MarkerCluster(e,n,t)},getMapMassMarks=function(e,n){return new AMap.MassMarks(e,n)},getMapInfoWindow=function(e){return new AMap.InfoWindow(e)},getMapContextMenu=function(e){return new AMap.ContextMenu(e)},getMapPolygon=function(e){return new AMap.Polygon(e)},getMapPolyline=function(e){return new AMap.Polyline(e)},getMapBezierCurve=function(e){return new AMap.BezierCurve(e)},getMapCircle=function(e){return new AMap.Circle(e)},getMapCircleMarker=function(e){return new AMap.CircleMarker(e)},getMapEllipse=function(e){return new AMap.Ellipse(e)},getMapRectangle=function(e){return new AMap.Rectangle(e)},getMapGeoJSON=function(e){return new AMap.GeoJSON(e)},getMapLayerGroup=function(e){return new AMap.LayerGroup(e)},getMapOverlayGroup=function(e){return new AMap.OverlayGroup(e)},getMapControl=function(e){return new AMap.Control(e)},getMapScale=function(e){return new AMap.Scale(e)},getMapToolBar=function(e){return new AMap.ToolBar(e)},getMapControlBar=function(e){return new AMap.ControlBar(e)},getMapMapType=function(e){return new AMap.MapType(e)},getMapHawkEye=function(e){return new AMap.HawkEye(e)},getMapRangingTool=function(e,n){return new AMap.RangingTool(e,n)},getMapMouseTool=function(e){return new AMap.MouseTool(e)},getMapPolygonEditor=function(e,n,t){return new AMap.PolygonEditor(e,n,t)},getMapPolylineEditor=function(e,n,t){return new AMap.PolylineEditor(e,n,t)},getMapCircleEditor=function(e,n,t){return new AMap.CircleEditor(e,n,t)},getMapBezierCurveEditor=function(e,n,t){return new AMap.BezierCurveEditor(e,n,t)},getMapEllipseEditor=function(e,n,t){return new AMap.EllipseEditor(e,n,t)},getMapRectangleEditor=function(e,n,t){return new AMap.RectangleEditor(e,n,t)},webService={get:function(e,n,t,r){return AMap.WebService.get(e,n,t,r)},post:function(e,n,t){return AMap.WebService.post(e,n,t)}},getMapAutoComplete=function(e){return new AMap.AutoComplete(e)},getMapPlaceSearch=function(e){return new AMap.PlaceSearch(e)},getMapCloudDataSearch=function(e,n){return new AMap.CloudDataSearch(e,n)},getMapGeocoder=function(e){return new AMap.Geocoder(e)},getMapDriving=function(e){return new AMap.Driving(e)},getMapTruckDriving=function(e){return new AMap.TruckDriving(e)},getMapWalking=function(e){return new AMap.Walking(e)},getMapTransfer=function(e){return new AMap.Transfer(e)},getMapRiding=function(e){return new AMap.Riding(e)},getMapDragRoute=function(e,n,t,r){return new AMap.DragRoute(e,n,t,r)},getMapDragRouteTruck=function(e,n){return new AMap.DragRouteTruck(e,n)},getMapGraspRoad=function(){return new AMap.GraspRoad},getMapDistrictSearch=function(e,n,t,r,i){return new AMap.DistrictSearch(e,n,t,r,i)},getMapWeather=function(){return new AMap.Weather},getMapStationSearch=function(e){return new AMap.StationSearch(e)},getMapLineSearch=function(e,n){return new AMap.LineSearch(e,n)},getMapGeolocation=function(e){return new AMap.Geolocation(e)},getMapCitySearch=function(){return new AMap.CitySearch},getInitMap=function(e){return e||baseMap},bindEvent={on:function(e,n,t){t.on(e,n)},off:function(e,n,t){t.off(e,n)},hasEvents:function(e,n,t){t.hasEvents(e,n)},clearEvents:function(e,n){n.clearEvents(e)},emit:function(e,n,t){n.emit(e,t)}},toLngLat=function(e,n){return new AMap.LngLat(e,n,2<arguments.length&&void 0!==arguments[2]&&arguments[2])},toBounds=function(e,n){return new AMap.Bounds(e,n)},toPixel=function(e,n){return new AMap.Pixel(e,n)},toSize=function(e,n){return new AMap.Size(e,n)},convertFrom=function(e,n){var i=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"gps",o=[e,n];return new Promise(function(t,r){AMap.convertFrom(o,i,function(e,n){"ok"===n.info?t(n.locations):r(o)})})},geometryUtil={base:function(){return AMap.GeometryUtil},distance:function(e,n){return AMap.GeometryUtil.distance(e,n)},ringArea:function(e){return AMap.GeometryUtil.ringArea(e)},ringAreaByAltitude:function(e){return AMap.GeometryUtil.ringAreaByAltitude(e)},isClockwise:function(e){return AMap.GeometryUtil.isClockwise(e)},typePolygon:function(e){return AMap.GeometryUtil.typePolygon(e)},makesureClockwise:function(e){return AMap.GeometryUtil.makesureClockwise(e)},makesureAntiClockwise:function(e){return AMap.GeometryUtil.makesureAntiClockwise(e)},distanceOfLine:function(e){return AMap.GeometryUtil.distanceOfLine(e)},distanceOfLineByAltitude:function(e){return AMap.GeometryUtil.distanceOfLineByAltitude(e)},distanceLineByAltitude:function(e,n){return AMap.GeometryUtil.distanceLineByAltitude(e,n)},ringRingClip:function(e,n){return AMap.GeometryUtil.ringRingClip(e,n)},doesSegmentsIntersect:function(e,n,t,r){return AMap.GeometryUtil.doesSegmentsIntersect(e,n,t,r)},doesSegmentLineIntersect:function(e,n,t){return AMap.GeometryUtil.doesSegmentLineIntersect(e,n,t)},doesSegmentRingIntersect:function(e,n,t){return AMap.GeometryUtil.doesSegmentRingIntersect(e,n,t)},doesSegmentPolygonIntersect:function(e,n){return AMap.GeometryUtil.doesSegmentPolygonIntersect(e,n)},doesLineLineIntersect:function(e,n){return AMap.GeometryUtil.doesLineLineIntersect(e,n)},doesLineRingIntersect:function(e,n){return AMap.GeometryUtil.doesLineRingIntersect(e,n)},doesRingRingIntersect:function(e,n){return AMap.GeometryUtil.doesRingRingIntersect(e,n)},pointInRing:function(e,n){return AMap.GeometryUtil.pointInRing(e,n)},isPointInRing:function(e,n){return AMap.GeometryUtil.isPointInRing(e,n)},isPointInBbox:function(e,n){return AMap.GeometryUtil.isPointInBbox(e,n)},isRingInRing:function(e,n){return AMap.GeometryUtil.isRingInRing(e,n)},isPointInPolygon:function(e,n){return AMap.GeometryUtil.isPointInPolygon(e,n)},isPointInPolygons:function(e,n){return AMap.GeometryUtil.isPointInPolygons(e,n)},isPointOnSegment:function(e,n,t,r){return AMap.GeometryUtil.isPointOnSegment(e,n,t,r)},isPointOnLine:function(e,n,t){return AMap.GeometryUtil.isPointOnLine(e,n,t)},isPointOnRing:function(e,n,t){return AMap.GeometryUtil.isPointOnRing(e,n,t)},isPointOnPolygon:function(e,n,t){return AMap.GeometryUtil.isPointOnPolygon(e,n,t)},closestOnSegment:function(e,n,t){return AMap.GeometryUtil.closestOnSegment(e,n,t)},closestOnLine:function(e,n){return AMap.GeometryUtil.closestOnLine(e,n)},distanceToSegment:function(e,n,t){return AMap.GeometryUtil.distanceToSegment(e,n,t)},distanceToLine:function(e,n){return AMap.GeometryUtil.distanceToLine(e,n)}},domUtil={base:function(){return AMap.DomUtil},getViewport:function(e){return AMap.DomUtil.getViewport(e)},getViewportOffset:function(e){return AMap.DomUtil.getViewportOffset(e)},create:function(e,n,t,r){return AMap.DomUtil.create(e,n,t,r)},hasClass:function(e,n){return AMap.DomUtil.hasClass(e,n)},addClass:function(e,n){AMap.DomUtil.addClass(e,n)},setClass:function(e,n){AMap.DomUtil.setClass(e,n)},removeClass:function(e,n){AMap.DomUtil.removeClass(e,n)},remove:function(e){AMap.DomUtil.remove(e)},empty:function(e){AMap.DomUtil.empty(e)},rotate:function(e,n,t){AMap.DomUtil.rotate(e,n,t)},setCss:function(e,n){AMap.DomUtil.setCss(e,n)},setOpacity:function(e,n){AMap.DomUtil.setOpacity(e,n)}},browser={base:function(){return AMap.Browser},us:function(){return AMap.Browser.us},mobile:function(){return AMap.Browser.mobile},plat:function(){return AMap.Browser.plat},windows:function(){return AMap.Browser.windows},ios:function(){return AMap.Browser.ios},iPad:function(){return AMap.Browser.iPad},Phone:function(){return AMap.Browser.Phone},android:function(){return AMap.Browser.android},android23:function(){return AMap.Browser.android23},chrome:function(){return AMap.Browser.chrome},firefox:function(){return AMap.Browser.firefox},safari:function(){return AMap.Browser.safari},wechat:function(){return AMap.Browser.wechat},uc:function(){return AMap.Browser.uc},qq:function(){return AMap.Browser.qq},ie:function(){return AMap.Browser.ie},ie6:function(){return AMap.Browser.ie6},ie7:function(){return AMap.Browser.ie7},ie8:function(){return AMap.Browser.ie8},ie9:function(){return AMap.Browser.ie9},ie10:function(){return AMap.Browser.ie10},ie11:function(){return AMap.Browser.ie11},ielt9:function(){return AMap.Browser.ielt9},edge:function(){return AMap.Browser.edge},isLocalStorage:function(){return AMap.Browser.isLocalStorage},isGeolocation:function(){return AMap.Browser.isGeolocation},mobileWebkit:function(){return AMap.Browser.mobileWebkit},mobileWebkit3d:function(){return AMap.Browser.mobileWebkit3d},retina:function(){return AMap.Browser.retina},touch:function(){return AMap.Browser.touch},msPointer:function(){return AMap.Browser.msPointer},pointer:function(){return AMap.Browser.pointer},webkit:function(){return AMap.Browser.webkit},webkit3d:function(){return AMap.Browser.webkit3d},gecko3d:function(){return AMap.Browser.gecko3d},ie3d:function(){return AMap.Browser.ie3d},any3d:function(){return AMap.Browser.any3d},opera3d:function(){return AMap.Browser.opera3d},isCanvas:function(){return AMap.Browser.isCanvas},isSvg:function(){return AMap.Browser.isSvg},isVML:function(){return AMap.Browser.isVML},isWorker:function(){return AMap.Browser.isWorker},isWebsocket:function(){return AMap.Browser.isWebsocket},isWebGL:function(){return AMap.Browser.isWebGL}},utils={base:function(){return AMap.Util},isDOM:function(e){return AMap.Util.isDOM(e)},colorNameToHex:function(e){return AMap.Util.colorNameToHex(e)},rgbHex2Rgba:function(e){return AMap.Util.rgbHex2Rgba(e)},argbHex2Rgba:function(e){return AMap.Util.argbHex2Rgba(e)},isEmpty:function(e){return AMap.Util.isEmpty(e)},deleteItemFromArray:function(e,n){AMap.Util.deleteItemFromArray(e,n)},deleteItemFromArrayByIndex:function(e,n){AMap.Util.deleteItemFromArrayByIndex(e,n)},indexOf:function(e,n){return AMap.Util.indexOf(e,n)},format:function(e,n){return AMap.Util.format(e,n)},isArray:function(e){return AMap.Util.isArray(e)},includes:function(e,n){return AMap.Util.includes(e,n)},requestIdleCallback:function(e){return AMap.Util.requestIdleCallback(e)},cancelIdleCallback:function(e){AMap.Util.cancelIdleCallback(e)},requestAnimFrame:function(e){return AMap.Util.requestAnimFrame(e)},cancelAnimFrame:function(e){AMap.Util.cancelAnimFrame(e)}};